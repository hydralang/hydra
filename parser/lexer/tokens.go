// Copyright (c) 2019 Kevin L. Mitchell
//
// Licensed under the Apache License, Version 2.0 (the "License"); you
// may not use this file except in compliance with the License.  You
// may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.  See the License for the specific language governing
// permissions and limitations under the License.

package lexer

import "github.com/hydralang/hydra/parser/common"

// lastTok retrieves the last token that was generated by the lexer.
// This could include pushed-back tokens.
func (l *lexer) lastTok() *common.Token {
	if l.tokens.Len() > 0 {
		// Return the end of the token queue
		return l.tokens.Back().Value.(*common.Token)
	}

	// Use the last token returned
	return l.prevTok
}

// pushTok pushes a token onto the end of the token queue.  This is in
// contrast to Push(), which pushes onto the beginning of the token
// queue.
func (l *lexer) pushTok(sym *common.Symbol, loc common.Location, val interface{}) {
	// Avoid recursive calls
	if sym != common.TokError && sym != common.TokIndent && sym != common.TokDedent {
		// Do special handling if last token is not set or is
		// newline
		prevTok := l.lastTok()
		if prevTok == nil || prevTok.Sym == common.TokNewline {
			// Elide duplicate newlines
			if sym == common.TokNewline {
				return
			}

			// Apply indentation
			if sym == common.TokEOF {
				// For EOF, dedent back to column 1
				l.doIndent(1, loc)
			} else {
				// Adjust indent for beginning of
				// token
				l.doIndent(loc.B.C, loc)
			}
		}
	}

	// Push the token onto the queue
	l.tokens.PushBack(&common.Token{
		Sym: sym,
		Loc: loc,
		Val: val,
	})
}

// pushErr pushes an error token onto the end of the token queue.
// This is similar to pushTok(), but it additionally closes the
// scanner, so that token processing is halted.
func (l *lexer) pushErr(loc common.Location, err error) {
	l.tokens.PushBack(&common.Token{
		Sym: common.TokError,
		Loc: loc,
		Val: err,
	})
	l.s = nil
}
